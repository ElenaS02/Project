const iconMap = {
  –ë–æ–ª–Ω–∏—Ü–∞: "üè•",
  –£—á–∏–ª–∏—â–µ: "üè´",
  –ü–æ–∂–∞—Ä–Ω–∞: "üöí",
  –ü–æ–ª–∏—Ü–∏—è: "üöì"
};

const map = L.map("map").setView([42.7339, 25.4858], 7);

L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution: "&copy; OpenStreetMap contributors"
}).addTo(map);

let features = [
  { name: "–£–ú–ë–ê–õ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∞", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–°–æ—Ñ–∏—è, –±—É–ª. –ü–µ–Ω—á–æ –°–ª–∞–≤–µ–π–∫–æ–≤ 1", coords: [42.6934, 23.3080] },
  { name: "–£–ú–ë–ê–õ –°–≤. –ì–µ–æ—Ä–≥–∏", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–ü–ª–æ–≤–¥–∏–≤, –±—É–ª. –í–∞—Å–∏–ª –ê–ø—Ä–∏–ª–æ–≤ 15–ê", coords: [42.1526, 24.7453] },
  { name: "–°–£ –ò–≤–∞–Ω –í–∞–∑–æ–≤", type: "–£—á–∏–ª–∏—â–µ", address: "–°—Ç–∞—Ä–∞ –ó–∞–≥–æ—Ä–∞, —É–ª. –ì–µ–Ω. –°—Ç–æ–ª–µ—Ç–æ–≤ 2", coords: [42.4258, 25.6345] },
  { name: "–ü–ú–ì –ê–∫–∞–¥. –ù–∏–∫–æ–ª–∞ –û–±—Ä–µ—à–∫–æ–≤", type: "–£—á–∏–ª–∏—â–µ", address: "–ë—É—Ä–≥–∞—Å, —É–ª. –ì–µ–æ—Ä–≥–∏ –ö–∏—Ä–∫–æ–≤ 1", coords: [42.4975, 27.4700] },
  { name: "–†–°–ü–ë–ó–ù –í–∞—Ä–Ω–∞", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–í–∞—Ä–Ω–∞, —É–ª. –ü—Ä–µ—Å–ª–∞–≤ 26", coords: [43.2070, 27.9190] },
  { name: "–†–°–ü–ë–ó–ù –†—É—Å–µ", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–†—É—Å–µ, —É–ª. –ë–æ—Ä–∏—Å–æ–≤–∞ 85", coords: [43.8466, 25.9535] },
  { name: "–û–î–ú–í–† –ë–ª–∞–≥–æ–µ–≤–≥—Ä–∞–¥", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–ë–ª–∞–≥–æ–µ–≤–≥—Ä–∞–¥, —É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∞ 99", coords: [42.0196, 23.0975] },
  { name: "–û–î–ú–í–† –í–µ–ª–∏–∫–æ –¢—ä—Ä–Ω–æ–≤–æ", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–í–µ–ª–∏–∫–æ –¢—ä—Ä–Ω–æ–≤–æ, —É–ª. –ù–∏–∫–æ–ª–∞ –ì–∞–±—Ä–æ–≤—Å–∫–∏ 49", coords: [43.0757, 25.6172] },
  { name: "–£–ú–ë–ê–õ –°–≤–µ—Ç–∞ –ê–Ω–Ω–∞", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–°–æ—Ñ–∏—è, –±—É–ª. –¶–∞—Ä–∏–≥—Ä–∞–¥—Å–∫–æ —à–æ—Å–µ 100", coords: [42.6666, 23.3775] },
  { name: "–ú–ë–ê–õ –î-—Ä –¢–æ—Ç–∞ –í–µ–Ω–∫–æ–≤–∞", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–ì–∞–±—Ä–æ–≤–æ, —É–ª. –ë—Ä–∞—Ç—è –ñ–µ–∫–æ–≤–∏ 1", coords: [42.8733, 25.3184] },
  { name: "–ú–ë–ê–õ –®—É–º–µ–Ω", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–®—É–º–µ–Ω, –±—É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∏ 30", coords: [43.2712, 26.9361] },
  { name: "–ü–ì–ï–ï –ê–ø–æ—Å—Ç–æ–ª –ê—Ä–Ω–∞—É–¥–æ–≤", type: "–£—á–∏–ª–∏—â–µ", address: "–†—É—Å–µ, –±—É–ª. –•—Ä–∏—Å—Ç–æ –ë–æ—Ç–µ–≤ 24", coords: [43.8457, 25.9559] },
  { name: "–û–£ –°–≤. –ö–ª–∏–º–µ–Ω—Ç –û—Ö—Ä–∏–¥—Å–∫–∏", type: "–£—á–∏–ª–∏—â–µ", address: "–°–º–æ–ª—è–Ω, —É–ª. –ë—ä–ª–≥–∞—Ä–∏—è 32", coords: [41.5778, 24.7012] },
  { name: "–ü—Ä–æ—Ñ–∏–ª–∏—Ä–∞–Ω–∞ –≥–∏–º–Ω–∞–∑–∏—è –•—Ä–∏—Å—Ç–æ –ë–æ—Ç–µ–≤", type: "–£—á–∏–ª–∏—â–µ", address: "–ö—ä—Ä–¥–∂–∞–ª–∏, –±—É–ª. –ë—ä–ª–≥–∞—Ä–∏—è 56", coords: [41.6505, 25.3684] },
  { name: "–†–°–ü–ë–ó–ù –°–ª–∏–≤–µ–Ω", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–°–ª–∏–≤–µ–Ω, –±—É–ª. –ü–µ–π–æ –Ø–≤–æ—Ä–æ–≤ 10", coords: [42.6859, 26.3292] },
  { name: "–†–°–ü–ë–ó–ù –ü–ª–µ–≤–µ–Ω", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–ü–ª–µ–≤–µ–Ω, —É–ª. –î. –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤ 1", coords: [43.4125, 24.6197] },
  { name: "–†–°–ü–ë–ó–ù –°–º–æ–ª—è–Ω", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–°–º–æ–ª—è–Ω, –±—É–ª. –ë—ä–ª–≥–∞—Ä–∏—è 5", coords: [41.5773, 24.7015] },
  { name: "–û–î–ú–í–† –•–∞—Å–∫–æ–≤–æ", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–•–∞—Å–∫–æ–≤–æ, —É–ª. –î—É–Ω–∞–≤ 1", coords: [41.9349, 25.5550] },
  { name: "–û–î–ú–í–† –°–∏–ª–∏—Å—Ç—Ä–∞", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–°–∏–ª–∏—Å—Ç—Ä–∞, –±—É–ª. –ú–∞–∫–µ–¥–æ–Ω–∏—è 103", coords: [44.1172, 27.2606] },
  { name: "–û–î–ú–í–† –õ–æ–≤–µ—á", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–õ–æ–≤–µ—á, —É–ª. –¢—ä—Ä–≥–æ–≤—Å–∫–∞ 5", coords: [43.1350, 24.7131] },
  { name: "–°–£ –ù–∏–∫–æ–ª–∞ –í–∞–ø—Ü–∞—Ä–æ–≤", type: "–£—á–∏–ª–∏—â–µ", address: "–ü–µ—Ç—Ä–∏—á, —É–ª. –•—Ä–∏—Å—Ç–æ –ß–µ—Ä–Ω–æ–ø–µ–µ–≤", coords: [41.400191, 23.209744]},
  { name: "–ú–ë–ê–õ –†–æ–∫—Ñ–µ–ª–µ—Ä", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–ü–µ—Ç—Ä–∏—á, —É–ª. –†–æ–∫—Ñ–µ–ª–µ—Ä 54", coords: [41.397670, 23.205496] },
  { name: "–£–ú–ë–ê–õ –ë—É—Ä–≥–∞—Å", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–ë—É—Ä–≥–∞—Å, –±—É–ª. –°—Ç–µ—Ñ–∞–Ω –°—Ç–∞–º–±–æ–ª–æ–≤ 73", coords: [42.5065, 27.4656]},
  { name: "–ú–ë–ê–õ –•–∞—Å–∫–æ–≤–æ", type: "–ë–æ–ª–Ω–∏—Ü–∞", address: "–•–∞—Å–∫–æ–≤–æ, —É–ª. –°–ª–∞–≤—è–Ω—Å–∫–∞ 52", coords: [41.9381, 25.5630]},
  { name: "–°–£ –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏", type: "–£—á–∏–ª–∏—â–µ", address: "–ü–ª–µ–≤–µ–Ω, —É–ª. –í–∞—Å–∏–ª –õ–µ–≤—Å–∫–∏ 60", coords: [43.4108, 24.6194]},
  { name: "–ü–ì –ø–æ –ï–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏–∫–∞", type: "–£—á–∏–ª–∏—â–µ", address: "–°–∏–ª–∏—Å—Ç—Ä–∞, —É–ª. –î–æ–±—Ä—É–¥–∂–∞ 14", coords: [44.1133, 27.2674]},
  { name: "–†–°–ü–ë–ó–ù –°–º—è–¥–æ–≤–æ", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–°–º—è–¥–æ–≤–æ, —É–ª. –•—Ä–∏—Å—Ç–æ –ë–æ—Ç–µ–≤ 12", coords: [43.0004, 27.0191]},
  { name: "–†–°–ü–ë–ó–ù –ü–µ—Ä–Ω–∏–∫", type: "–ü–æ–∂–∞—Ä–Ω–∞", address: "–ü–µ—Ä–Ω–∏–∫, —É–ª. –Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω 4", coords: [42.6087, 23.0293]},
  { name: "–û–î–ú–í–† –ü–µ—Ä–Ω–∏–∫", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–ü–µ—Ä–Ω–∏–∫, —É–ª. –†–∞–∫–æ–≤—Å–∫–∞ 1", coords: [42.6092, 23.0300]},
  { name: "–û–î–ú–í–† –í–∏–¥–∏–Ω", type: "–ü–æ–ª–∏—Ü–∏—è", address: "–í–∏–¥–∏–Ω, —É–ª. –¶–∞—Ä –°–∏–º–µ–æ–Ω –í–µ–ª–∏–∫–∏ 67", coords: [43.9924, 22.8723]}




];

let markers = [];

const tbody = document.querySelector("#attributeTable tbody");

function renderTable(filterType = "all") {
  tbody.innerHTML = "";
  features.forEach((feature, index) => {
    if (filterType === "all" || feature.type === filterType) {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${feature.name}</td>
        <td>${feature.type}</td>
        <td>${feature.address}</td>
        <td>
          <button onclick="zoomTo(${index})">üîç–ü—Ä–∏–±–ª–∏–∂–∏</button>
          <button onclick="deleteFeature(${index})">üóëÔ∏è–ò–∑—Ç—Ä–∏–π</button>
          <button onclick="editFeature(${index})">‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–∞–π</button>
        </td>
      `;
      tbody.appendChild(row);
    }
  });
}

function zoomTo(index) {
  const feature = features[index];
  map.setView(feature.coords, 15);
}

function deleteFeature(index) {
  features.splice(index, 1);
  renderTable();
  renderMarkers();
}

function editFeature(index) {
  const f = features[index];
  const newName = prompt("–ù–æ–≤–æ –∏–º–µ:", f.name);
  const newType = prompt("–ù–æ–≤ —Ç–∏–ø (–ë–æ–ª–Ω–∏—Ü–∞, –£—á–∏–ª–∏—â–µ, –ü–æ–∂–∞—Ä–Ω–∞, –ü–æ–ª–∏—Ü–∏—è):", f.type);
  const newAddress = prompt("–ù–æ–≤ –∞–¥—Ä–µ—Å:", f.address);
  const newLat = parseFloat(prompt("–ù–æ–≤–∞ —à–∏—Ä–∏–Ω–∞:", f.coords[0]));
  const newLng = parseFloat(prompt("–ù–æ–≤–∞ –¥—ä–ª–∂–∏–Ω–∞:", f.coords[1]));

  if (newName && newType && newAddress && !isNaN(newLat) && !isNaN(newLng)) {
    features[index] = {
      name: newName,
      type: newType,
      address: newAddress,
      coords: [newLat, newLng]
    };
    renderTable();
    renderMarkers();
  }
}

function renderMarkers(filterType = "all") {
  markers.forEach(marker => map.removeLayer(marker));
  markers = [];

  features.forEach((feature) => {
    if (filterType === "all" || feature.type === filterType) {
      const marker = L.marker(feature.coords, {
        icon: L.divIcon({
          className: 'emoji-icon',
          html: `<span style="font-size: 24px;">${iconMap[feature.type] || "‚ö™"}</span>`
        })
      }).addTo(map).bindPopup(`<strong>${feature.name}</strong><br>${feature.address}`);
      markers.push(marker);
    }
  });
}

function setupFilter() {
  const container = document.createElement("div");
  container.style.margin = "10px";

  const label = document.createElement("label");
  label.textContent = "–¢–∏–ø –æ–±–µ–∫—Ç: ";
  container.appendChild(label);

  const select = document.createElement("select");
  select.innerHTML = `
    <option value="all">–í—Å–∏—á–∫–∏</option>
    <option value="–ë–æ–ª–Ω–∏—Ü–∞">–ë–æ–ª–Ω–∏—Ü–∞</option>
    <option value="–£—á–∏–ª–∏—â–µ">–£—á–∏–ª–∏—â–µ</option>
    <option value="–ü–æ–∂–∞—Ä–Ω–∞">–ü–æ–∂–∞—Ä–Ω–∞</option>
    <option value="–ü–æ–ª–∏—Ü–∏—è">–ü–æ–ª–∏—Ü–∏—è</option>
  `;
  select.onchange = () => {
    renderTable(select.value);
    renderMarkers(select.value);
  };
  container.appendChild(select);

  document.body.insertBefore(container, document.getElementById("map"));
}

function setupAddForm() {
  const form = document.createElement("form");
  form.style.margin = "10px";
  form.innerHTML = `
    <h3>–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ –æ–±–µ–∫—Ç</h3>
    <input placeholder="–ò–º–µ" id="nameInput" required />
    <input placeholder="–ê–¥—Ä–µ—Å" id="addressInput" required />
    <input placeholder="–®–∏—Ä–∏–Ω–∞ (lat)" id="latInput" type="number" step="any" required />
    <input placeholder="–î—ä–ª–∂–∏–Ω–∞ (lng)" id="lngInput" type="number" step="any" required />
    <select id="typeInput">
      <option value="–ë–æ–ª–Ω–∏—Ü–∞">–ë–æ–ª–Ω–∏—Ü–∞</option>
      <option value="–£—á–∏–ª–∏—â–µ">–£—á–∏–ª–∏—â–µ</option>
      <option value="–ü–æ–∂–∞—Ä–Ω–∞">–ü–æ–∂–∞—Ä–Ω–∞</option>
      <option value="–ü–æ–ª–∏—Ü–∏—è">–ü–æ–ª–∏—Ü–∏—è</option>
    </select>
    <button type="submit">‚ûï –î–æ–±–∞–≤–∏</button>
  `;

form.onsubmit = (e) => {
    e.preventDefault();
    const name = document.getElementById("nameInput").value;
    const address = document.getElementById("addressInput").value;
    const lat = parseFloat(document.getElementById("latInput").value);
    const lng = parseFloat(document.getElementById("lngInput").value);
    const type = document.getElementById("typeInput").value;

     features.push({ name, address, coords: [lat, lng], type });
     map.setView([lat, lng], 15);
    renderTable();
    renderMarkers();
    form.reset();
  };

  document.body.insertBefore(form, document.getElementById("map"));
  function haversineDistance(coord1, coord2) {
  const toRad = angle => (angle * Math.PI) / 180;
  const R = 6371; 
  const dLat = toRad(coord2[0] - coord1[0]);
  const dLon = toRad(coord2[1] - coord1[1]);
  const lat1 = toRad(coord1[0]);
  const lat2 = toRad(coord2[0]);

  const a = Math.sin(dLat / 2) ** 2 +
            Math.sin(dLon / 2) ** 2 * Math.cos(lat1) * Math.cos(lat2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

  return R * c;
}

let analysisLines = [];
document.getElementById("analyzeBtn").addEventListener("click", runGeoAnalysis);

function runGeoAnalysis() {
  analysisLines.forEach(line => map.removeLayer(line));
  analysisLines = [];

  const –£—á–∏–ª–∏—â–µ = features.filter(f => f.type === "–£—á–∏–ª–∏—â–µ");
  const –ë–æ–ª–Ω–∏—Ü–∞ = features.filter(f => f.type === "–ë–æ–ª–Ω–∏—Ü–∞");

  –£—á–∏–ª–∏—â–µ.forEach(–£—á–∏–ª–∏—â–µ => {
    let nearest = null;
    let minDist = Infinity;

    –ë–æ–ª–Ω–∏—Ü–∞.forEach(–ë–æ–ª–Ω–∏—Ü–∞ => {
      const dist = haversineDistance(–£—á–∏–ª–∏—â–µ.coords, –ë–æ–ª–Ω–∏—Ü–∞.coords);
      if (dist < minDist) {
        minDist = dist;
        nearest = –ë–æ–ª–Ω–∏—Ü–∞;
      }
    });

    if (nearest) {
      const line = L.polyline([–£—á–∏–ª–∏—â–µ.coords, nearest.coords], {
        color: "blue",
        weight: 2,
        dashArray: "4",
      }).addTo(map);

      line.bindPopup(
        `<strong>${–£—á–∏–ª–∏—â–µ.name}</strong> ‚Üí <strong>${nearest.name}</strong><br>–†–∞–∑—Å—Ç–æ—è–Ω–∏–µ: ${minDist.toFixed(2)} km`
      );
      analysisLines.push(line);
    }
  });
}
}

document.getElementById("downloadBtn").addEventListener("click", function() {
  const data = JSON.stringify(features, null, 2);
  const blob = new Blob([data], { type: "application/json" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = "public_services_data.json";
  a.click();
  URL.revokeObjectURL(url);
});


setupFilter();
setupAddForm();
renderTable();
renderMarkers();
